委托（delegate）：
1.类型安全（方法签名一致）（相对于C++函数指针）
2.支持单播和多播（多个函数一起调用）
3.为事件和LINQ提供基础（松散耦合）
4.内置异步调用接口（BeginInvoke，EndInvoke）
5.have co/contra variance when assigning new functions to a delegate（协变和逆变）
 
 
 Delegates serve three purposes:
A simplified implementation of the Observer pattern
A simplified implementation of callbacks
Anonymous (non-reusable) blocks of code

// Define the delegate type:
public delegate int Comparison<in T>(T left, T right);（看起来像是声明变量，其实是声明类型）

// Declare an instance of that type:
public Comparison<T> comparator;（声明变量）

public abstract class Delegate : ICloneable, ISerializable
public abstract class MulticastDelegate : Delegate
使用的每个委托都派生自 MulticastDelegate
常用方法：Invoke() 和 BeginInvoke() / EndInvoke()

对于一个新的不同的方法签名，总是需要创建一个新的委托？
泛型委托：
1.public delegate void Action();
public delegate void Action<in T>(T arg);
public delegate void Action<in T1, in T2>(T1 arg1, T2 arg2);（无返回值，最多可以有16个输入参数）
2.public delegate TResult Func<out TResult>();
public delegate TResult Func<in T1, out TResult>(T1 arg);
public delegate TResult Func<in T1, in T2, out TResult>(T1 arg1, T2 arg2););（有返回值，最多可以有16个输入参数）
3.Predicate
public delegate bool Predicate<in T>(T obj);
This delegate is used by several methods of the Array and List<T> classes to search for elements in the collection.

事件（event）：
通过订阅事件，还可在两个对象（事件源和事件接收器，或者叫事件发布者和事件订阅者）之间创建耦合。 需要确保当不再对事件感兴趣时，事件接收器将从事件源取消订阅。
用于定义事件以及订阅或取消订阅事件的语法是对委托语法的扩展。
//
    // Summary:
    //     Represents the method that will handle an event when the event provides data.
    //
    // Parameters:
    //   sender:
    //     The source of the event.
    //
    //   e:
    //     An object that contains the event data.
    //
    // Type parameters:
    //   TEventArgs:
    //     The type of the event data generated by the event.
    public delegate void EventHandler<TEventArgs>(object sender, TEventArgs e);
定义事件（event关键字）:
public event EventHandler<FileListArgs> Progress;
引发事件：
Progress?.Invoke(this, new FileListArgs(file));
订阅事件：
EventHandler<FileListArgs> onProgress = (sender, eventArgs) => 
    Console.WriteLine(eventArgs.FoundFile);
lister.Progress += OnProgress;
取消订阅事件：
lister.Progress -= onProgress;

弱事件：WeakEventManager
